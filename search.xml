<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[最近的学习感想]]></title>
      <url>%2F2016%2F12%2F06%2Fpost%E2%80%9C%2F</url>
      <content type="text"><![CDATA[&#160; &#160; &#160; &#160;最近把《Head First HTML与CSS》这本书读完了，真的是非常经典，书刚送到时候看到这么厚一本，吓了我一跳，还以为是本字典呢！(;´Д`)后来看着发现对于我这种初学者简直不能再赞了！特别是书里的问与答，让我知道了许多网上教程里没讲到的知识，看来学习还是不能离开了书阿(＾o＾)ﾉ，今天又从网上买了《JavaScript高级程序设计（第3版）》、《JavaScript语言精粹（修订版）》、《你不知道的JavaScript》《锋利的jQuery（第2版）》.好像有点多啊。(|||ﾟДﾟ) &#160; &#160; &#160; &#160;马上就要开始学习Javascript了，我相信自己是能学会的！昨晚睡觉前看了一集动画，对里面的一句话特别有感触：“如果不能变得更强大，就要学会更圆滑”。其实从辞职后开始无产学习，压力是很大的，这些压力来自自己，也来自环境，并不是所有人都能明白你的所作所为，大多数人都认为我像个傻瓜似的天天呆在房间里玩电脑。可是难道真的要随便找个工作来混日子？我觉得那样的生活也就没什么意思了，我还年轻，不想变成一个世故圆滑的人，知世故而不世故是最善良的成熟，我必须变得更强大。 &#160; &#160; &#160; &#160;这是昨天模拟报纸布局的练习： &#160; &#160; &#160; &#160;demo：https://54yangshuang.github.io/06task/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[由“三栏式练习”引发的思考]]></title>
      <url>%2F2016%2F12%2F03%2Fmy-new-post%2F</url>
      <content type="text"><![CDATA[&#160; &#160; &#160;&#160;开始学前端已经有一周了，HTML和css基础也快看完了，昨天在做一个“三栏式布局”的练习，遇到了一些小问题，就在这写一写吧。 先来看这个练习的要求 使用 HTML 与 CSS 按照示例图（下方）实现三栏式布局。 左右两栏宽度固定，中间一栏根据父元素宽度填充满，最外面的框应理解为浏览器。背景色为 #eee 区域的高度取决于三个子元素中最高的高度。&emsp;看完了要求，我就开始根据最近学的知识来想办法实现这个布局，下面就说说我的思路和遇到一些坑。 看完要求，我首先想到的是用浮动来实现这个布局，也就是左栏float： left；右栏float: right;。既然想法有了那就开敲吧！1234567&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 嗯，先给他来4个div…根据要求知道container的宽高没有明确的给出数值，宽是浏览器的宽，高取决于它包裹的子元素的最高高度，那么在设置css属性的时候就不用给它设置宽高了，只按照要求设置内外边距、背景颜色和边框属性就可以了。123456.container&#123; margin: 20px; padding: 20px; background: #eee; border: 1px solid #999; &#125; 接下来是给左右栏设置属性，让它们左右浮动。123456789101112.left &#123; float: left; width: 200px; background: #fff; border: 1px solid #999; &#125;.right &#123; float: right; width: 120px; background: #fff; border: 1px solid #999; &#125; 敲完这些用浏览器打开一下会发现是这样子的 &emsp; 是不是很奇怪，这并不是我想要的效果啊。是什么原因导致的呢？书上说是这种情况是外部DIV发生了高度塌陷，我是这么理解的： 因为我一开始没有设置container的高度，所以它的高是由它所包裹的子元素的高来决定的，后来我又给左右栏分别设置了左浮和右浮的属性，这就使这两个container的子元素脱离了标准流，浮动流中浮动的元素是不可以撑起父级元素的高度的，没有子元素的高度支撑，所以它的高度就会缩减，缩减成自身padding属性的40px。 那怎么解决这种高度塌陷的问题呢？ 一：添加进行清理浮动的元素（但书中说，这会在页面中增加不必要的标记，不建议用这种方法）。二：（1）使父元素也添加float（2）使父元素posation:absolute（3）使父元素display：inline-block三：（1）父元素overflow:hidden（2）父元素使用zoom 这里先不说哪种方法最好，毕竟清除浮动有好多种方式，目前作为菜鸟的我也不是特别懂。 这里我用的是给父元素添加 overflow:hidden也就是这样的1234567.container&#123; margin: 20px; padding: 20px; background: #eee; border: 1px solid #999; overflow:hidden; &#125; 这样就解决了高度塌陷这个问题。再往下做那就简单了，分别在左右两栏中创建子元素，添加样式 接着往下做，我遇到了一个坑！ 上面布局要求里说明了，中间一栏的高度宽度都没有给出明确的数值，都是要自适应，做到这我发现不会做了，左右两栏至少还给了宽度啊！这都不给怎么做！我陷入了思考，也进行了许多尝试。 1.把中栏也加float首先我想要不要也把中间的设置为浮动，我试了试结果是这样子的 ！！！根本不是要这种效果的好不好！浮动元素如果不设置宽高，那么它的宽高就会由内容决定，这使得中间栏完全不受控制，会破坏布局。 2.中间栏不加float后来不给中间栏加float，让它还保持标准流状态，发现右边栏还是会被挤下去，三栏不同高。后来想到标准流下div是个块级元素，会独占一行，那么把中间栏的div放在最后面，左右两栏因为浮动脱标，会和中间栏显示在同一行，再把中间栏设置margin-left: ; margin-right: ;对中间栏进行一个定位。代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .container &#123; margin: 20px; padding: 20px; background: #eee; border: 1px solid #999; overflow: auto; &#125; .left &#123; float: left; padding: 20px; width: 200px; background: #fff; border: 1px solid #999; &#125; .teamlogo &#123; width: 80px; height: 80px; background-color: #eee; border: 1px solid #999; &#125; .right &#123; float: right; width: 120px; background: #fff; border: 1px solid #999; &#125; .logo1 &#123; width: 80px; height: 80px; background-color: #eee; border: 1px solid #999; margin: 20px; &#125; .middle &#123; padding: 20px; background: #fff; border: 1px solid #999; margin-left: 260px; margin-right: 140px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;div class=&quot;teamlogo&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;div class=&quot;logo1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;logo1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;logo1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;logo1&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;middle&quot;&gt; &lt;h1&gt;简述&lt;/h1&gt; &lt;br/&gt; &lt;p&gt; 这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述这是一段长长的简述 &lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 到这里就算是做完了（至少看上去和要求里一样了…） 后来我又去查了查其他几种实现的方法，不得不说博客是个好东西啊，大神分享的方法很值得学习下面就是使用CSS实现三栏自适应布局（两边宽度固定，中间自适应）的几种方法。 绝对定位法 将左右两栏使用absolute定位，因为绝对定位使其脱离文档流，后面的center会自然流动到他们上面，然后使用margin属性，留出左右元素的宽度，既可以使中间元素自适应屏幕宽度。 三个div顺序可以任意改变。 不足：如果页面上还有其他内容，top的值需要小心处理，最好能够对css样式进行一个初始化。由于此种方式不常使用，暂不放代码。 &emsp; 自身浮动法（我就是用的这种） 对左右两栏分别使用float:left和float:right，float使左右两个元素脱离文档流，中间元素正常在正常文档流中，使用margin指定左右外边距对其进行一个定位。 中间栏center占据文档流位置，一定要放在最后。 123456789101112131415161718192021222324252627282930&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;/div&gt;.container &#123; background: #eee; border: 1px solid #999; padding: 20px; overflow: auto; min-width: 600px;&#125;.main &#123; padding: 20px; margin-left: 220px; margin-right:180px; border: 1px solid #999; background:white; overflow: hidden;&#125;.left &#123; width: 160px; float: left; padding: 20px; border: 1px solid #999; background:white;&#125;.right &#123; width: 120px; float: right; padding: 20px; border: 1px solid #999; background:white;&#125; &emsp; 圣杯布局圣杯布局是Kevin Cornell在2006年提出的一个布局模型概念。 把主列放在文档流最前面，使主列优先加载； 让三列浮动，左右两栏加上负margin让其跟中间栏div并排; 利用父容器的左、右内边距padding和相对定位realtive实现三栏自适应 padding-left值要等于left块的宽度，padding-right值等于right块的宽度123456789101112131415161718192021222324252627282930//圣杯布局法&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;.container &#123; padding-left: 210px; padding-right: 190px; min-width: 600px;&#125;.main &#123; float: left; width: 100%; height: 300px; background-color: rgba(255, 0, 0, .5); &#125;.left &#123; position: relative; left: -210px; float: left; width: 200px; height: 300px; margin-left: -100%; background-color: rgba(0, 255, 0, .5); &#125;.right &#123; position: relative; right: -190px; width: 180px; height: 300px; margin-left: -180px; background-color: rgba(0, 0, 255, .5); &#125; 双飞翼布局在国内最早由淘宝UED的工程师（玉伯）改进圣杯布局模型并传播开来，命名为双飞翼布局，兼容性好，扩展性强。 把主列放在文档流最前面，使主列优先加载； 让三列浮动，左右两栏加上负margin让其跟中间栏div并排; 利用父容器的左、右内边距padding和相对定位realtive实现三栏自适应 为了main内容不被遮挡，在main里面添加一个子元素center来显示内容，设置content的margin-left和margin-right为左右两栏div留出位置； 主要利用主列的左、右外边距定位。12345678910111213141516171819202122232425262728//双飞翼布局&lt;h3&gt;使用margin负值法进行布局&lt;/h3&gt; &lt;div class=&quot;container&quot;&gt; &lt;div id = &quot;main&quot;&gt; &lt;div id = &quot;center&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id = &quot;left&quot;&gt;&lt;/div&gt; &lt;div id = &quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;.container &#123; border: 2px solid yellow; overflow: hidden; &#125;#main&#123; width: 100%; height: 100px; background-color: #fff; float: left;&#125;#main #center&#123; margin:0 210px; height: 100px; background-color: #ffe6b8; &#125;#left,#right&#123; float: left; width: 200px; height: 100px; background-color: darkorange; &#125;#left&#123;margin-left: -100%; background-color: lightpink;&#125;#right&#123;margin-left: -200px;&#125; 圣杯布局和双飞翼布局对比：双飞翼布局比圣杯布局多使用了1个div，少用大致4个css属性（圣杯布局container的 padding-left和padding-right这2个属性，加上左右两个div用相对布局position: relative及对应的right和left共4个属性；双飞翼布局子div里用margin-left和margin-right共2个属性，比圣杯布局思路更直接和简洁一点。在浏览器上的兼容性非常好，IE5.5以上都支持。 弹性盒模型布局:flex弹性布局是指通过调整其内元素的宽高，从而在任何显示设备上实现对可用显示空间最佳填充的能力，布局算法是方向无关的。弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。兼容性：现代主流浏览器，IE10+-弹性布局特征： 在外围包裹一层div，设置为display：flex； 中间栏设置flex：1； 盒模型默认紧紧挨着，可以使用margin控制外边距。123#box&#123;width:100%;display: flex; height: 100px;margin: 10px;&#125; #left_box,#right_box&#123;width: 200px;height: 100px; margin: 10px; background-color: lightpink;&#125; #center_box&#123; flex:1; height: 100px;margin: 10px; background-color: lightgreen&#125; 若考虑浏览器兼容问题，可在flex前加上浏览器类型前缀1234display:-webkit-flex;display:-moz-flex;display:flex;display:-ms-flex; 好吧一个三栏式布局就有这么多种方法来实现。路漫漫其修远兮啊！今天就写到这吧。]]></content>
    </entry>

    
  
  
</search>
